'use strict';

var _ = require('lodash');

var controllerHelper = require('../helpers/controller.helper');
var messageHelper = require('../helpers/message.helper');
var {{name_low}}Service = require('../services/{{name_low}}.service');

////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
////////////////////////////////////////////////////////////////////////////////

// Module Name
const MODULE_NAME = '[{{name_1upper}} Controller]';

// Error Messages
const GS_CT_ERR_{{name_upper}}_NOT_FOUND = '{{name_1upper}} not found';

// Success Messages
const GS_CT_DELETED_SUCCESSFULLY = '{{name_1upper}} deleted successfully';

////////////////////////////////////////////////////////////////////////////////
// PUBLIC METHODS
////////////////////////////////////////////////////////////////////////////////

function get{{name_1upper_plural}}(req, res) {

  try {
    // Receiving parameters
    var params = {
      name: req.swagger.params.name.value,
      sort: req.swagger.params.sort.value
    };

    // Call to service
    var result = {{name_low}}Service.get{{name_1upper_plural}}(params);

    // Returning the result
    res.json(result);
  } catch (error) {
    controllerHelper.handleErrorResponse(MODULE_NAME, get{{name_1upper_plural}}.name, error, res);
  }
}

function get{{name_1upper}}ById(req, res) {

  try {
    // Receiving parameters
    var params = {
      id: req.swagger.params.id.value
    };

    // Call to service
    var result = {{name_low}}Service.get{{name_1upper}}ById(params.id);

    // Returning the result
    if (!_.isUndefined(result)) {
      res.json(result);
    } else {
      res.status(404).json(messageHelper.buildMessage(GS_CT_ERR_{{name_upper}}_NOT_FOUND))
    }
  } catch (error) {
    controllerHelper.handleErrorResponse(MODULE_NAME, get{{name_1upper}}ById.name, error, res);
  }
}

function create{{name_1upper}}(req, res) {

  try {
    // Receiving parameters
    var params = req.body;

    // Call to service
    var result = {{name_low}}Service.create{{name_1upper}}(params);

    // Returning the result
    if (!_.isUndefined(result) && _.isUndefined(result.error)) {
      res.status(201).json(result);
    } else {
      res.status(409).json(messageHelper.buildMessage(result.error));
    }
  } catch (error) {
    controllerHelper.handleErrorResponse(MODULE_NAME, create{{name_1upper}}.name, error, res);
  }
}

function update{{name_1upper}}(req, res) {

  try {
    // Receiving parameters
    var params = {
      id: req.swagger.params.id.value
    };
    _.assign(params, req.body);

    // Call to service
    var result = {{name_low}}Service.update{{name_1upper}}(params);

    // Returning the result
    if (!_.isUndefined(result) && _.isUndefined(result.error)) {
      res.json(result);
    } else {
      res.status(409).json(messageHelper.buildMessage(result.error));
    }
  } catch (error) {
    controllerHelper.handleErrorResponse(MODULE_NAME, update{{name_1upper}}.name, error, res);
  }
}

function delete{{name_1upper}}(req, res) {

  try {
    // Receiving parameters
    var params = {
      id: req.swagger.params.id.value
    };

    // Call to service
    var result = {{name_low}}Service.delete{{name_1upper}}(params.id);

    // Returning the result
    if (!_.isUndefined(result) && _.isUndefined(result.error)) {
      res.json(messageHelper.buildMessage(GS_CT_DELETED_SUCCESSFULLY));
    } else {
      res.status(404).json(messageHelper.buildMessage(result.error));
    }
  } catch (error) {
    controllerHelper.handleErrorResponse(MODULE_NAME, create{{name_1upper}}.name, error, res);
  }
}

module.exports = {
  get{{name_1upper_plural}},
  get{{name_1upper}}ById,
  create{{name_1upper}},
  update{{name_1upper}},
  delete{{name_1upper}},
  GS_CT_ERR_{{name_upper}}_NOT_FOUND,
  GS_CT_DELETED_SUCCESSFULLY,
  MODULE_NAME
}