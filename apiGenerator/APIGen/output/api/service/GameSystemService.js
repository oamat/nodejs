'use strict';

/**
 * Autogenerated Service code by SnAPI framework - git:  https://github.com/oamat/nodejs
 *      SQL Lite Repository https://www.sqlitetutorial.net/sqlite-nodejs
 * 
 *
 * Author:  OAF 
 * git:  https://github.com/oamat/nodejs
 **/

 //Dependencies
 const utils = require('../utils/writer.js');
 const repository = require('../repositories/');
 
exports.getAllGameSystems = async (name, sort) => {
    return new Promise((resolve, reject) => {
        let data = await repository.getAllGameSystems(name, sort);     
        if (data) {
          let response = utils.respondWithCode(200,data);    
          resolve(response);
        } else {
          let response = utils.respondWithCode(404,{"empty": false});
          resolve(response);
        }
      });
}
exports.createGameSystem = async (gamesystem) => {
    return new Promise((resolve, reject) => {
        let data = await repository.createGameSystem(gamesystem);     
        if (data) {
          let response = utils.respondWithCode(200,data);    
          resolve(response);
        } else {
          let response = utils.respondWithCode(404,{"empty": false});
          resolve(response);
        }
      });
}
exports.getOneGameSystemById = async (id) => {
    return new Promise((resolve, reject) => {
        let data = await repository.getOneGameSystemById(id);     
        if (data) {
          let response = utils.respondWithCode(200,data);    
          resolve(response);
        } else {
          let response = utils.respondWithCode(404,{"empty": false});
          resolve(response);
        }
      });
}
exports.updateGameSystem = async (id, gamesystem) => {
    return new Promise((resolve, reject) => {
        let data = await repository.updateGameSystem(id, gamesystem);     
        if (data) {
          let response = utils.respondWithCode(200,data);    
          resolve(response);
        } else {
          let response = utils.respondWithCode(404,{"empty": false});
          resolve(response);
        }
      });
}
exports.deleteGameSystem = async (id) => {
    return new Promise((resolve, reject) => {
        let data = await repository.deleteGameSystem(id);     
        if (data) {
          let response = utils.respondWithCode(200,data);    
          resolve(response);
        } else {
          let response = utils.respondWithCode(404,{"empty": false});
          resolve(response);
        }
      });
}
