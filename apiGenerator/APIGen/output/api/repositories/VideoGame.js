'use strict';

/**
 * Autogenerated Repository code by SnAPI framework - git:  https://github.com/oamat/nodejs
 *      SQL Lite Repository https://www.sqlitetutorial.net/sqlite-nodejs
 * 
 *
 * Author:  OAF 
 * git:  https://github.com/oamat/nodejs
 **/


//Dependencies
const { db } = require('./sqllite_conn.js');

exports.getAllVideoGames = async (name, developer, gamesystem, genre, year, sort) => {
    return new Promise((resolve, reject) => { // we need promise for managing errors and results inside callbacks
        console.log("\x1b[32m", 'executing getAllVideoGames.');
        
        let sql = `SELECT * FROM VideoGames WHERE name = ? AND developer = ? AND gamesystem = ? AND genre = ? AND year = ? AND sort = ?`;
        let params = [name, developer, gamesystem, genre, year, sort];
        db.all(sql, params, function (err, results) {
            if (err) reject(err); 
            resolve(results);           
            //resolve({ id: this.lastID });
        });
    });
    //.then(() => {});
}

exports.createVideoGame = async (videogame) => {
    return new Promise((resolve, reject) => { // we need promise for managing errors and results inside callbacks
        console.log("\x1b[32m", 'executing createVideoGame');
        
        let name = videogame.name;
        let developer = videogame.developer;
        let gamesystem = videogame.gamesystem;
        let genre = videogame.genre;
        let year = videogame.year;
        let image = videogame.image;
        let sql = `INSERT INTO VideoGames (name, developer, gamesystem, genre, year, image) VALUES (?, ?, ?, ?, ?, ?)`;
        let params = [name, developer, gamesystem, genre, year, image];
        db.run(sql, params, function (err) {            
            if (err) reject(err);                     
            resolve({ id: this.lastID , created: this.changes});
        });
    });
    //.then(() => {});
}
exports.getOneVideoGameById = async (id) => {
    return new Promise((resolve, reject) => { // we need promise for managing errors and results inside callbacks
        console.log("\x1b[32m", 'executing getOneVideoGameById.');
        
        let sql = `SELECT * FROM VideoGames WHERE id = ?`;
        let params = [id];
        db.get(sql, params, function (err, row) {
            if (err) reject(err); 
            resolve(row);           
            //resolve({ id: this.lastID });
        });
    });
    //.then(() => {});
}

exports.updateVideoGame = async (id, videogame) => {
    return new Promise((resolve, reject) => { // we need promise for managing errors and results inside callbacks        
        console.log("\x1b[32m", 'executing updateVideoGame.');
        
        let name = videogame.name;
        let developer = videogame.developer;
        let gamesystem = videogame.gamesystem;
        let genre = videogame.genre;
        let year = videogame.year;
        let image = videogame.image;
        let sql = `UPDATE VideoGames SET name = ?, developer = ?, gamesystem = ?, genre = ?, year = ?, image = ? WHERE id = ?`;
        let params = [name, developer, gamesystem, genre, year, image, id];
        db.run(sql, params, function (err) {            
            if (err) reject(err);            
            resolve({ changed: this.changes });       
        });
    });
    //.then(() => {});
}
exports.deleteVideoGame = async (id) => {
    return new Promise((resolve, reject) => { // we need promise for managing errors and results inside callbacks        
        console.log("\x1b[32m", 'executing deleteVideoGame.');
        
        let sql = `DELETE FROM VideoGames WHERE id = ?`;
        let params = [id];
        db.run(sql, params, function (err) {            
            if (err) reject(err);            
            resolve({ deleted: this.changes} );
        });
    });
    //.then(() => {});
}
exports.getVideogamesByDev = async (developer) => {
    return new Promise((resolve, reject) => { // we need promise for managing errors and results inside callbacks
        console.log("\x1b[32m", 'executing getVideogamesByDev.');
        
        let sql = `SELECT * FROM VideoGames WHERE developer = ?`;
        let params = [developer];
        db.all(sql, params, function (err, result) {
            if (err) reject(err);            
            resolve(result);
        });
    });
    //.then(() => {});
}