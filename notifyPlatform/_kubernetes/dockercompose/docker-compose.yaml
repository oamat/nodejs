version: "3.1"

services:



  #apple
   #Optional you can create the docker image  (# docker build -t name).
  apple: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: apple
    container_name: "apple"      
    restart: always
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redispns
      - redisconf
      - mongopns
    depends_on:
      - redispns
      - redisconf
      - mongopns
  


#google
   #Optional you can create the docker image  (# docker build -t name).
  google: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: google
    container_name: "google"      
    restart: always
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redispns
      - redisconf
      - mongopns
    depends_on:
      - redispns
      - redisconf
      - mongopns



  #microsoft
   #Optional you can create the docker image  (# docker build -t name).
  microsoft: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: microsoft
    container_name: "microsoft"      
    restart: always
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redispns
      - redisconf
      - mongopns
    depends_on:
      - redispns
      - redisconf
      - mongopns      



  #movistar
   #Optional you can create the docker image  (# docker build -t name) .
  movistar: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: movistar
    container_name: "movistar"      
    restart: always
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redissms
      - redisconf
      - mongosms
    depends_on:
      - redissms
      - redisconf
      - mongosms



#movistarvip
   #Optional you can create the docker image  (# docker build -t name) .
  movistarvip: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: movistarvip
    container_name: "movistarvip"      
    restart: always
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redissms
      - redisconf
      - mongosms
    depends_on:
      - redissms
      - redisconf
      - mongosms



  #vodafone
   #Optional you can create the docker image  (# docker build -t name) .
  vodafone: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: vodafone
    container_name: "vodafone"      
    restart: always
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redissms
      - redisconf
      - mongosms
    depends_on:
      - redissms
      - redisconf
      - mongosms  



  #orange
   #Optional you can create the docker image  (# docker build -t name) .
  orange: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: orange
    container_name: "orange"      
    restart: always
     
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redissms
      - redisconf
      - mongosms
    depends_on:
      - redissms
      - redisconf
      - mongosms



  #mqsms
   #Optional you can create the docker image  (# docker build -t name) .
  mqsms: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: mqsms
    container_name: "mqsms"      
    restart: always
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redissms
      - redisconf
      - mongosms
    depends_on:
      - redissms
      - redisconf
      - mongosms



  #mqpns
   #Optional you can create the docker image  (# docker build -t name) .
  mqpns: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: mqpns
    container_name: "mqpns"      
    restart: always
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redispns
      - redisconf
      - mongopns
    depends_on:
      - redispns
      - redisconf
      - mongopns



#apiadmin
   #Optional you can create the docker image  (# docker build -t name) .
  apiadmin: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: apiadmin
    container_name: "apiadmin"      
    restart: always
    ports:
      - 30003:30003
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redispns
      - redisconf
      - redissms
      - mongopns
      - mongosms
    depends_on:
      - redispns
      - redisconf
      - redissms
      - mongopns
      - mongosms



  #apisms
   #Optional you can create the docker image  (# docker build -t name) .
  apisms: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: apisms
    container_name: "apisms"      
    restart: always
    ports:
      - 30001:30001
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redissms
      - redisconf
      - mongosms
    depends_on:
      - redissms
      - redisconf
      - mongosms



#apipns
   #Optional you can create the docker image  (# docker build -t name) .
  apipns: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: apipns
    container_name: "apipns"      
    restart: always
    ports:
      - 30002:30002
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redispns
      - redisconf
      - mongopns
    depends_on:
      - redispns
      - redisconf
      - mongopns
  


#apistatusback
   #Optional you can create the docker image  (# docker build -t name) .
  apistatusback: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: apistatusback
    container_name: "apistatusback"      
    restart: always
    ports:
      - 30004:30004
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redissms
      - redisconf
      - mongosms
    depends_on:
      - redissms
      - redisconf
      - mongosms



  #retriessms
   #Optional you can create the docker image  (# docker build -t name) .
  retriessms: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: retriessms
    container_name: "retriessms"      
    restart: always
    ports:
      - 30005:30005
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
    links:
      - redissms
      - redisconf
      - mongosms
    depends_on:
      - redissms
      - redisconf
      - mongosms



  #retriespns
   #Optional you can create the docker image  (# docker build -t name) .
  retriespns: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: retriespns
    container_name: "retriespns"      
    restart: always
    ports:
      - 30006:30006
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes 
    links:
      - redispns
      - redisconf
      - mongopns
    depends_on:
      - redispns
      - redisconf
      - mongopns



#redispns
   #Optional you can create the docker image  (# docker build -t name) .
  redispns: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: redispns
    container_name: "redispns"      
    restart: always
    ports:
      - 30081:30081
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes




#redissms
   #Optional you can create the docker image  (# docker build -t name) .
  redissms: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: redissms
    container_name: "redissms"      
    restart: always
    ports:
      - 30080:30080
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes




#redisconf
   #Optional you can create the docker image  (# docker build -t name) .
  redisconf: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.  
    image: redisconf
    container_name: "redisconf"      
    restart: always
    ports:
      - 30082:30082
    
    environment:
      NODE_ENV: "docker"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes




#mongopns
   #Optional you can create the docker image  (# docker build -t name) .
  mongopns: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.
    image: mongopns
    container_name: "mongopns"
    restart: always
    #volumes:
    #  - ./data:/data/db
    ports:
      - 30091:30091
    environment:
      MONGO_INITDB_ROOT_USERNAME: "root"
      MONGO_INITDB_ROOT_PASSWORD: "example"
      MONGO_INITDB_DATABASE: "test"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
  
  



#mongosms
   #Optional you can create the docker image  (# docker build -t name) .
  mongosms: 
    #build: . #build: Dockerfile #Optional : "build: ." Uses an image that’s built from the Dockerfile in the current directory.
    image: mongosms
    container_name: "mongosms"
    restart: always
    #volumes:
    #  - ./data:/data/db
    ports:
      - 30090:30090
    environment:
      MONGO_INITDB_ROOT_USERNAME: "root"
      MONGO_INITDB_ROOT_PASSWORD: "example"
      MONGO_INITDB_DATABASE: "test"
    labels:
     kompose.service.type: NodePort # labels for kompose convert to kubernetes
     kompose.image-pull-policy: Never # labels for kompose convert to kubernetes
  
  
